<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>不想丸辣的博客</title>
  
  <subtitle>天道酬勤（bushi）</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2024-04-24T11:05:15.396Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>不想丸辣</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>帕鲁CTFwp</title>
    <link href="http://example.com/wp/"/>
    <id>http://example.com/wp/</id>
    <published>2024-04-20T05:34:19.256Z</published>
    <updated>2024-04-24T11:05:15.396Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x01MISC"><a href="#0x01MISC" class="headerlink" title="0x01MISC"></a>0x01MISC</h1><p>上周第一次参加了正式的ctf比赛，学到了很多东西，特意记录一下自己的wp与复现</p><span id="more"></span><h2 id="江"><a href="#江" class="headerlink" title="江"></a>江</h2><p>这一题我们直接将其放至谷歌地图搜索</p><p><img src="/../images/wp.assets/j1.png"></p><p>可以看到显示为武汉江汉路，再看左边的新金珠宝，就可以定位到武汉市新金珠宝江汉路店，再地图上搜索就可有找到具体位置了</p><p><img src="/../images/wp.assets/j2.png"></p><p>这样就可以得到flag：flag{湖北省武汉市江汉二路与江汉路步行街交叉路口}</p><h2 id="FM145-8"><a href="#FM145-8" class="headerlink" title="FM145.8"></a>FM145.8</h2><p>这一题首先去查看频谱仪跟查看是否为音频隐写，都不是这里就想到了另一种方法用声音传输图片，这里我们使用RX sstv来解决这题，在使用是应将声音的输入与输出都转为虚拟声卡也可以用手机的Robot36</p><p><img src="/../images/wp.assets/sstv.png"></p><p>所以可以得到答案:flag{19b4dD77bF3c66f9ic23F5A25Bc314CB}</p><p>另一种解法是使用QSSTV在kali中输入<code>sudo apt-get install qsstv</code></p><p>安装qstv，之后qsstv-&gt;Options-&gt;Configration-&gt;Sound-&gt;from file</p><p><img src="/../images/wp.assets/kali.png"></p><p>但是Qsstv对音频有格式要求必须是wav格式且采样率必须为48000</p><p>而本题的采样率为41400，这里可以使用Audacity去导出48000hz采样率的音频</p><p>再使用Qsstv即会产生图像</p><p><img src="/../images/wp.assets/323.png"></p><h2 id="Misc-签到"><a href="#Misc-签到" class="headerlink" title="Misc-签到"></a>Misc-签到</h2><p>这一题打开是一个文档然后是一堆数字，这里就是将十进制数字的字符串转换成相应的 Unicode 字符串</p><p><img src="/../images/wp.assets/g.png"></p><p>这里写一个python脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">string = <span class="string">&quot;27880 30693 25915 21892 38450 23454 39564 23460 21457 36865 112 108 98 99 116 102 33719 21462 21069 27573 102 108 97 103 20851 27880 79 110 101 45 70 111 120 23433 20840 22242 38431 22238 22797 112 108 98 99 116 102 33719 21462 21518 27573 102 108 97 103&quot;</span></span><br><span class="line">decimals = <span class="built_in">map</span>(<span class="built_in">int</span>, decimal_string.split())</span><br><span class="line"></span><br><span class="line">chinese_chars = <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">chr</span>(decimal) <span class="keyword">for</span> decimal <span class="keyword">in</span> decimals])</span><br><span class="line"><span class="built_in">print</span>(chinese_chars)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>最后运行就可以得到我们想要的结果</p><h2 id="ez-misc"><a href="#ez-misc" class="headerlink" title="ez_misc"></a>ez_misc</h2><p>这一题给了一张图片与一个需要密码的压缩包文件</p><p><img src="/../images/wp.assets/ezmisc1.png"></p><p>这里我们用010 Editor打开，在文件末尾发现一提示字符</p><p><img src="/../images/wp.assets/ezmisc2.png"></p><p>我们将后面的空格与点复制出来，但是并不会显现我们可以考虑一下snow隐写，将后面的字符复制粘贴在一个新建文本上</p><p><img src="/../images/wp.assets/ezmisc3.png"></p><p>可以得到压缩包密码Carefree and carefree</p><p><img src="/../images/wp.assets/ezmisc4.png"></p><p>最终得到flag：flag{b220116fc6ca827ecf3cb6c6c06dac26}</p><h2 id="350x350"><a href="#350x350" class="headerlink" title="350x350"></a>350x350</h2><p>这一题给了我们一张图片加有密码的压缩包</p><p><img src="/../images/wp.assets/350.png"></p><p>按惯例我们用010Editor去查看，发现后面缺少结束标志，判断有可能在里面塞了压缩包</p><p><img src="/../images/wp.assets/3502.png"></p><p>我们打开kali利用binwalk工具查看</p><p><img src="/../images/wp.assets/3503.png"></p><p>可以看见里面藏了多个xml文件，用foremost将其分离可以得到一个压缩包文件我们将其以word的方式打开</p><p><img src="/../images/wp.assets/3504.png"></p><p>很显然是隐藏了文字我们将隐藏文字的勾去掉就能显现文字了</p><p><img src="/../images/wp.assets/3505.png"></p><p>把这段文字放到网上搜索显示为64周易，可能为一种加密方式，这里就不用传统的解密方式，解密字典如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">乾:111111 坤:000000 屯:010001 蒙:100010 需:010111 讼:111010 师:000010 比:010000 小畜:110111 履:111011 泰:000111 否:111000</span><br><span class="line">同人:111101 大有:101111 谦:000100 豫:001000 随:011001 蛊:100110 临:000011 观:110000 噬嗑:101001 贲:100101 剥:100000 复:000001</span><br><span class="line">无妄:111001 大畜:100111 颐:100001 大过:011110 坎:010010 离:101101 咸:011100恒:001110遁:111100 大壮:001111</span><br><span class="line">晋:101000 明夷:000101 家人:110101 睽:101011 蹇:010100 解:001010 损:100011 益:110001 夬:011111 姤:111110 萃:011000 升:000110</span><br><span class="line">困:011010 井:010110 革:011101 鼎:101110 震:001001 艮:100100 渐:110100 归妹:001011 丰:001101 旅:101100 巽:110110 兑:011011</span><br><span class="line">涣:110010 节:010011 中孚:110011 小过:001100 既济:010101 未济:101010    阳:1  阴:0</span><br></pre></td></tr></table></figure><p>我们这里使用随波逐流工具箱直接解密出密文</p><p><img src="/../images/wp.assets/3506.png"></p><p>我们将密码填入压缩包又得到了一张图片：</p><p><img src="/../images/wp.assets/22.jpg"></p><p>老规矩用010editor打开看一看</p><p><img src="/../images/wp.assets/3507.png"></p><p>依旧没有尾部标志，使用binwalk+foremost可以分离出两张图片</p><p><img src="/../images/wp.assets/3508.png"></p><h1 id="0x02RE"><a href="#0x02RE" class="headerlink" title="0x02RE"></a>0x02RE</h1><h2 id="Auth-System"><a href="#Auth-System" class="headerlink" title="Auth System"></a>Auth System</h2><p>对于这题我们再进行查壳后首先使用x64debug进行调试可以发现有一行直接跳至‘This computer is not authorized’的指令再动态调试后发现他最后都会执行这一条汇编指令，所以我们可以对其修改，使其跳向输出flag的命令行</p><p><img src="/../images/wp.assets/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20240422202256.png"></p><p>我们对4016F1这行汇编指令进行修改，填充汇编指令使其跳转至4016FA使其能够输出flag</p><p><img src="/../images/wp.assets/a2.png"></p><p>改完之后我们再调试运行一遍（图片地址由于本人写wp昏头了为错误位置，正确位置为4016FA）</p><p><img src="/../images/wp.assets/aa.png"></p><p>最终可以在终端得到我们的flag：flag{ASCII_ART_IS_FUN}</p><h2 id="帕鲁被病毒感染了"><a href="#帕鲁被病毒感染了" class="headerlink" title="帕鲁被病毒感染了"></a>帕鲁被病毒感染了</h2><p>一进来是一个压缩包加一张png图片，初看这张图片很有可能存在一个高宽隐写，这里我们使用CRC32校验，去爆破出正确的宽高</p><p><img src="/../images/wp.assets/image-20240420113216946.png"></p><p>使用python爆破脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line">crcbp = <span class="built_in">open</span>(<span class="string">&quot;D:\paluctf\帕鲁被病毒感染了\帕鲁被病毒攻击了\帕鲁帕鲁.png&quot;</span>, <span class="string">&quot;rb&quot;</span>).read()    <span class="comment">#打开图片</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2000</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2000</span>):</span><br><span class="line">        data = crcbp[<span class="number">12</span>:<span class="number">16</span>] + \</span><br><span class="line">            struct.pack(<span class="string">&#x27;&gt;i&#x27;</span>, i)+struct.pack(<span class="string">&#x27;&gt;i&#x27;</span>, j)+crcbp[<span class="number">24</span>:<span class="number">29</span>]</span><br><span class="line">        crc32 = binascii.crc32(data) &amp; <span class="number">0xffffffff</span></span><br><span class="line">        <span class="keyword">if</span>(crc32 == <span class="number">0x8857b020</span>):    <span class="comment">#图片当前CRC</span></span><br><span class="line">            <span class="built_in">print</span>(i, j)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;hex:&#x27;</span>, <span class="built_in">hex</span>(i), <span class="built_in">hex</span>(j))</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>得到正确的宽高</p><p><img src="/../images/wp.assets/image-20240420113546772.png"></p><p>在010修改宽高就可以得到完整的图片</p><p><img src="/../images/wp.assets/%E5%B8%95%E9%B2%81%E5%B8%95%E9%B2%811.png"></p><p>得到压缩包的密码：palubei@2024#01</p><p>打开压缩包之后我们可以发现有三个文件夹加3个文本文件</p><p><img src="/../images/wp.assets/image-20240420114130054.png"></p><p>我们解析manifest.json中的代码发现其实是一个关于docker容器的部署，三个文件夹为layer层</p><p>所以我们逐个分析三个分析  </p><p>在第二个文件夹的lay.tar中找到一个名为cat文件</p><p><img src="/../images/wp.assets/image-20240420114521758.png"></p><p>用010打开cat发现其实一个在Linux的可执行elf文件</p><p><img src="/../images/wp.assets/image-20240420114633231.png"></p><p>再往后翻就翻到了出题人给的flag</p><p><img src="/../images/wp.assets/image-20240420114715334.png"></p><p>最终得到flag：flag{0n3_n00b_ru1n5_0n3_hundr3d_pr05}</p><h2 id="茶"><a href="#茶" class="headerlink" title="茶"></a>茶</h2><p>这一题拿到程序先查壳</p><p><img src="/../images/wp.assets/cha.png"></p><p>可以看见是一个无壳的x64可执行文件，将其放入ida静态分析</p><p><img src="/../images/wp.assets/cha1.png"></p><p>初步分析是将用户输入的字符与内部的字符进行加密比对，如果字符是对的则输出成功提示，这里再用x64dbg动态调试一下，搜素全部字符可以看到提示再试一遍的提示我们再其地方下一个断点</p><p><img src="/../images/wp.assets/cha2.png"></p><p>单步调试运行，看见指针指到”Is_This_TEA?”这一段字符串处，继续单步运行</p><p><img src="/../images/wp.assets/cha3.png"></p><p>之后就会发现”Is_This_TEA?”在寄存器中逐渐变小，直至只剩下“TEA?”可以猜测这串字符的前部分被拿去对比加密</p><p><img src="/../images/wp.assets/cha4.png"></p><p>在”Is_This_TEA?”还有两串字符串</p><p><img src="/../images/wp.assets/cha5.png"></p><p>其中字符串”SGludDogSW1wcm92ZSBvZiBTYWxzYTIw“很像一串base64编码，用在线解密解密一下</p><p><img src="/../images/wp.assets/cha6.png"></p><p>可以看见提示说是Salsa20的改进算法，因此可以想到chacha20算法，正好也符合题目名字（滑稽）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> ChaCha20</span><br><span class="line"></span><br><span class="line">enc_data = <span class="built_in">bytes</span>.fromhex(<span class="string">&quot;f568c48912eed6dc520c7164f44b6378e1d0d3e248914fa8847b405a131f&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">key = <span class="string">b&quot;SGludDogSW1wcm92ZSBvZiBTYWxzYTIw&quot;</span></span><br><span class="line">nonce = <span class="string">b&quot;Is_This_&quot;</span></span><br><span class="line"></span><br><span class="line">cc = ChaCha20.new(key=key, nonce=nonce)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(cc.decrypt(enc_data))</span><br></pre></td></tr></table></figure><p><img src="/../images/wp.assets/cha7.png" alt="cha7"></p><p>得到flag：flag{But_I_Like_ChaCha20_More}</p><p>结语：因为才结束几天，官方wp还没有陆续放出来，等放出来会陆续更新</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;0x01MISC&quot;&gt;&lt;a href=&quot;#0x01MISC&quot; class=&quot;headerlink&quot; title=&quot;0x01MISC&quot;&gt;&lt;/a&gt;0x01MISC&lt;/h1&gt;&lt;p&gt;上周第一次参加了正式的ctf比赛，学到了很多东西，特意记录一下自己的wp与复现&lt;/p&gt;</summary>
    
    
    
    <category term="wp" scheme="http://example.com/categories/wp/"/>
    
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>欢迎来到我的博客</title>
    <link href="http://example.com/hello%20world/"/>
    <id>http://example.com/hello%20world/</id>
    <published>2024-03-27T08:53:44.998Z</published>
    <updated>2024-03-27T08:53:44.998Z</updated>
    
    <content type="html"><![CDATA[<p>这是一个计算机菜鸟的博客，我将在这里分享逆向工程，数据结构的学习笔记，在之后也会分享</p><p>c++,web安全，python的一些学习笔记（画个饼先）。欢迎各位一起交流学习</p><h2 id="自我介绍"><a href="#自我介绍" class="headerlink" title="自我介绍"></a>自我介绍</h2><h3 id="我的专业？"><a href="#我的专业？" class="headerlink" title="我的专业？"></a>我的专业？</h3><p>现在是一名大二的机械狗，至于会不会转去计科？我也不知道(ok也是成功转入计科了)</p><h3 id="为啥要建博客？"><a href="#为啥要建博客？" class="headerlink" title="为啥要建博客？"></a>为啥要建博客？</h3><p>闲着没事干（bushi）想在这里存放我脑子里微不足道的知识以方便未来的你我，如果没有帮助到你，我只能说sorry了</p><h3 id="欧克，我要说的话就这些，希望你能在我的博客有所收获"><a href="#欧克，我要说的话就这些，希望你能在我的博客有所收获" class="headerlink" title="欧克，我要说的话就这些，希望你能在我的博客有所收获"></a>欧克，我要说的话就这些，希望你能在我的博客有所收获</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/liuhua.gif" alt="liuhua"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这是一个计算机菜鸟的博客，我将在这里分享逆向工程，数据结构的学习笔记，在之后也会分享&lt;/p&gt;
&lt;p&gt;c++,web安全，python的一些学习笔记（画个饼先）。欢迎各位一起交流学习&lt;/p&gt;
&lt;h2 id=&quot;自我介绍&quot;&gt;&lt;a href=&quot;#自我介绍&quot; class=&quot;heade</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>CTF(Misc)初体验</title>
    <link href="http://example.com/CTF-Misc-%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
    <id>http://example.com/CTF-Misc-%E5%88%9D%E4%BD%93%E9%AA%8C/</id>
    <published>2023-12-06T07:12:52.000Z</published>
    <updated>2023-12-06T15:25:04.353Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CTF是什么"><a href="#CTF是什么" class="headerlink" title="CTF是什么"></a>CTF是什么</h1><p><u>CTF（Capture The Flag）</u>中文一般译作夺旗赛，在网络安全领域中指的是网络安全技术人员之间进行技术竞技的一种比赛形式。CTF起源于1996年DEFCON全球黑客大会，以代替之前黑客们通过互相发起真实攻击进行技术比拼的方式。发展至今，已经成为全球范围网络安全圈流行的竞赛形式，2013年全球举办了超过五十场国际性CTF赛事。而DEFCON作为CTF赛制的发源地，DEFCON CTF也成为了目前全球最高技术水平和影响力的CTF竞赛，类似于CTF赛场中的“世界杯” 。</p><span id="more"></span><h1 id="CTF的题目形式"><a href="#CTF的题目形式" class="headerlink" title="CTF的题目形式"></a>CTF的题目形式</h1><ul><li><h2 id="MISC（安全杂项）"><a href="#MISC（安全杂项）" class="headerlink" title="MISC（安全杂项）"></a>MISC（安全杂项）</h2></li></ul><p>全称Miscellaneous。题目涉及流量分析、电子取证、人肉搜索、数据分析、大数据统计等等，覆盖面比较广。我们平时看到的社工类题目；给你一个流量包让你分析的题目；取证分析题目，都属于这类题目。主要考查参赛选手的各种基础综合知识，考察范围比较广。</p><ul><li><h2 id="PPC（编程类）"><a href="#PPC（编程类）" class="headerlink" title="PPC（编程类）"></a><strong>PPC（编程类）</strong></h2></li></ul><p>全称Professionally Program Coder。题目涉及到程序编写、编程算法实现。算法的逆向编写，批量处理等，有时候用编程去处理问题，会方便的多。当然PPC相比ACM来说，还是较为容易的。至于编程语言嘛，推荐使用Python来尝试。这部分主要考察选手的快速编程能力。</p><ul><li><h2 id="REVERSE（逆向）"><a href="#REVERSE（逆向）" class="headerlink" title="REVERSE（逆向）"></a><strong>REVERSE（逆向）</strong></h2></li></ul><p>全称reverse。题目涉及到软件逆向、破解技术等，要求有较强的反汇编、反编译扎实功底。需要掌握汇编，堆栈、寄存器方面的知识。有好的逻辑思维能力。主要考查参赛选手的逆向分析能力。此类题目也是线下比赛的考察重点。</p><ul><li><h2 id="CRYPTO（密码学）"><a href="#CRYPTO（密码学）" class="headerlink" title="CRYPTO（密码学）"></a><strong>CRYPTO（密码学）</strong></h2></li></ul><p>全称Cryptography。题目考察各种加解密技术，包括古典加密技术、现代加密技术甚至出题者自创加密技术。实验吧“角斗场”中，这样的题目汇集的最多。这部分主要考查参赛选手密码学相关知识点。</p><ul><li><h2 id="WEB（web类）"><a href="#WEB（web类）" class="headerlink" title="WEB（web类）"></a><strong>WEB（web类）</strong></h2></li></ul><p>WEB应用在今天越来越广泛，也是CTF夺旗竞赛中的主要题型，题目涉及到常见的Web漏洞，诸如注入、XSS、文件包含、代码审计、上传等漏洞。这些题目都不是简单的注入、上传题目，至少会有一层的安全过滤，需要选手想办法绕过。且Web题目是国内比较多也是大家比较喜欢的题目。因为大多数人开始安全都是从web日站开始的。</p><h1 id="MISC简单示例"><a href="#MISC简单示例" class="headerlink" title="MISC简单示例"></a>MISC简单示例</h1><p>在MISC中，一般会给我们图片或者文件与压缩包，在我做题的过程中，出题者给出了如下一张图片<br><img src="/images/GG_.jpg" alt="GG_"></p><p>而题目的描述为”当培根掉到猪圈里会引起怎样的火花？？？拭目以待吧！！！“似乎有点奇怪，而且图片中间还有一些奇怪的字符。此时我们根据描述，可以去分别看看”培根“与”猪圈“是什么。在浏览器搜索可以知道它们分别指的是<strong>培根密码</strong>与<strong>猪圈密码</strong>。</p><p><img src="/images/1.jpg" alt="1"><br>我们可以发现图上的字符与我们上图的字符有点像，我们可以试着自己翻译或者去在线翻译，得到一串字符”ababbababbbababbabbababbaaaabbbaab“而这串字符又与培根密码有相似之处</p><p><img src="/images/2.jpg" alt="2"><br>此时我们对照翻译就是它的正确明文了（翻译为出来得到”MMXYYD“）。</p><h1 id="MISC图片隐写"><a href="#MISC图片隐写" class="headerlink" title="MISC图片隐写"></a>MISC图片隐写</h1><ul><li><h2 id="常见图片隐写"><a href="#常见图片隐写" class="headerlink" title="常见图片隐写"></a><strong>常见图片隐写</strong></h2></li></ul><h3 id="1隐藏在图片属性里"><a href="#1隐藏在图片属性里" class="headerlink" title="1隐藏在图片属性里"></a>1隐藏在图片属性里</h3><p>这种方式图片隐藏的flag我一般可以右键查看文件属性，来查看属性中有无对应的flag当然也有可能是一串经过加密的字符，我们可以通过其特性来找出相应的加密方法（属性里一般也会附带上经纬度，所以尽量不要发原图暴露自己的信息哦）</p><h3 id="2将压缩包伪装为图片"><a href="#2将压缩包伪装为图片" class="headerlink" title="2将压缩包伪装为图片"></a>2将压缩包伪装为图片</h3><p>一般来说，这种图片看起来与普通图片别无两样，我们可以通过binwalk查看，或者是采用查看压缩包的形式来查看该图片，而flag可能就藏在该图片的某个文件夹之类。</p><h3 id="3藏在图片的字节之中"><a href="#3藏在图片的字节之中" class="headerlink" title="3藏在图片的字节之中"></a>3藏在图片的字节之中</h3><p>这类题我们一般可以将图片放入WinHex或者是010 Editor中来查看而图片常见的文件格式如下表所示</p><table><thead><tr><th align="center">文件格式</th><th align="center">文件头</th><th align="center">文件尾</th></tr></thead><tbody><tr><td align="center">JEPG（jpg）</td><td align="center">FFD8FF</td><td align="center">FF D9</td></tr><tr><td align="center">PNG (png)</td><td align="center">89504E47</td><td align="center">AE 42 60 82</td></tr><tr><td align="center">GIF (gif)</td><td align="center">47494638</td><td align="center">00 3B</td></tr></tbody></table><p>在这里我们以下图为例</p><p><img src="/images/3.jpg" alt="3"></p><p>我们可以先右键查看它的属性<br><img src="/images/4.png" alt="4"></p><p>发现并没有相关解题信息，我们再以压缩包形式打开,也没有发现其他文件。此时我们将图片拖入010 Editor中查看它的文件头与文件尾。</p><p><img src="/images/5.png" alt="5"></p><p><img src="/images/6.png" alt="6"></p><p>我们与上述表格对比，发现在文件尾”FF D9”后本该什么也没有，但这里多出一串字符，而字符中的“CCSUCTF{010_3d1t0r_15_4_g00d_t00l}”就是我们要的答案了</p><ul><li><h2 id="LSB隐写"><a href="#LSB隐写" class="headerlink" title="LSB隐写"></a><strong>LSB隐写</strong></h2></li></ul><p>LSB即为最低有效位（Least Significant Bit，lsb），我们知道，图片中的图像像素一般是由RGB三原色（红绿蓝）组成，每一种颜色占用8位，取值范围为0x00~0xFF，即有256种颜色，一共包含了256的3次方的颜色，即16777216种颜色。而人类的眼睛可以区分约1000万种不同的颜色，这就意味着人类的眼睛无法区分余下的颜色大约有6777216种。</p><p><img src="/images/7.png" alt="7"></p><p>十进制的235表示的是绿色，我们修改了在二进制中的最低位，但是颜色看起来依旧没有变化。我们就可以修改最低位中的信息，实现信息的隐写。</p><p><img src="/images/8.jpg" alt="8"></p><p>而我们在解题过程中用到一款名为“StegSolve”的工具</p><p><img src="/images/9.png" alt="9"></p><p>在该软件我们可以通过给red，green，blue的0通道打勾来查看图片隐藏的信息。我们用下图来做示例</p><p><img src="/images/10.png" alt="10"></p><p>我们将文件导入软件并勾选三色的0通道来找到隐藏信息，最终效果如下</p><p><img src="/images/11.png" alt="11"></p><p>最终我们找到的本题的flag</p><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>其实这个博客在上周前就已经搭建好了，一直想写点东西，但奈何事情有点多，这几天将CTF题做了一部分终于斗胆写点东西，如果写的太差，还望大佬见谅</p><p>ok收工，看银魂去</p><p><img src="/images/11.gif" alt="11"></p><p>[1]: <a href="https://zhuanlan.zhihu.com/p/461716971">https://zhuanlan.zhihu.com/p/461716971</a>“ 网安合天实验室”</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;CTF是什么&quot;&gt;&lt;a href=&quot;#CTF是什么&quot; class=&quot;headerlink&quot; title=&quot;CTF是什么&quot;&gt;&lt;/a&gt;CTF是什么&lt;/h1&gt;&lt;p&gt;&lt;u&gt;CTF（Capture The Flag）&lt;/u&gt;中文一般译作夺旗赛，在网络安全领域中指的是网络安全技术人员之间进行技术竞技的一种比赛形式。CTF起源于1996年DEFCON全球黑客大会，以代替之前黑客们通过互相发起真实攻击进行技术比拼的方式。发展至今，已经成为全球范围网络安全圈流行的竞赛形式，2013年全球举办了超过五十场国际性CTF赛事。而DEFCON作为CTF赛制的发源地，DEFCON CTF也成为了目前全球最高技术水平和影响力的CTF竞赛，类似于CTF赛场中的“世界杯” 。&lt;/p&gt;</summary>
    
    
    
    <category term="MISC" scheme="http://example.com/categories/MISC/"/>
    
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
  </entry>
  
</feed>
